// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class addAdminEvent extends ethereum.Event {
  get params(): addAdminEvent__Params {
    return new addAdminEvent__Params(this);
  }
}

export class addAdminEvent__Params {
  _event: addAdminEvent;

  constructor(event: addAdminEvent) {
    this._event = event;
  }

  get OrgId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get operatorAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newAdminAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class createOrgProfileEvent extends ethereum.Event {
  get params(): createOrgProfileEvent__Params {
    return new createOrgProfileEvent__Params(this);
  }
}

export class createOrgProfileEvent__Params {
  _event: createOrgProfileEvent;

  constructor(event: createOrgProfileEvent) {
    this._event = event;
  }

  get OrgId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get orgInfo(): createOrgProfileEventOrgInfoStruct {
    return changetype<createOrgProfileEventOrgInfoStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class createOrgProfileEventOrgInfoStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get description(): string {
    return this[1].toString();
  }

  get metadataURI(): string {
    return this[2].toString();
  }

  get eventBadgeNFTs(): Array<Address> {
    return this[3].toAddressArray();
  }
}

export class removeAdminEvent extends ethereum.Event {
  get params(): removeAdminEvent__Params {
    return new removeAdminEvent__Params(this);
  }
}

export class removeAdminEvent__Params {
  _event: removeAdminEvent;

  constructor(event: removeAdminEvent) {
    this._event = event;
  }

  get OrgId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get operatorAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get oldAdminAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class updateOrgProfileEvent extends ethereum.Event {
  get params(): updateOrgProfileEvent__Params {
    return new updateOrgProfileEvent__Params(this);
  }
}

export class updateOrgProfileEvent__Params {
  _event: updateOrgProfileEvent;

  constructor(event: updateOrgProfileEvent) {
    this._event = event;
  }

  get OrgId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get operatorAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get orgInfo(): updateOrgProfileEventOrgInfoStruct {
    return changetype<updateOrgProfileEventOrgInfoStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }
}

export class updateOrgProfileEventOrgInfoStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get description(): string {
    return this[1].toString();
  }

  get metadataURI(): string {
    return this[2].toString();
  }

  get eventBadgeNFTs(): Array<Address> {
    return this[3].toAddressArray();
  }
}

export class Organisation extends ethereum.SmartContract {
  static bind(address: Address): Organisation {
    return new Organisation("Organisation", address);
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  exists(id: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBoolean();
  }

  try_exists(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getOrganisation(OrgId: BigInt): string {
    let result = super.call(
      "getOrganisation",
      "getOrganisation(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(OrgId)]
    );

    return result[0].toString();
  }

  try_getOrganisation(OrgId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getOrganisation",
      "getOrganisation(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(OrgId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getSignerAddr(_hashedMessage: Bytes, _v: i32, _r: Bytes, _s: Bytes): Address {
    let result = super.call(
      "getSignerAddr",
      "getSignerAddr(bytes32,uint8,bytes32,bytes32):(address)",
      [
        ethereum.Value.fromFixedBytes(_hashedMessage),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_v)),
        ethereum.Value.fromFixedBytes(_r),
        ethereum.Value.fromFixedBytes(_s)
      ]
    );

    return result[0].toAddress();
  }

  try_getSignerAddr(
    _hashedMessage: Bytes,
    _v: i32,
    _r: Bytes,
    _s: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSignerAddr",
      "getSignerAddr(bytes32,uint8,bytes32,bytes32):(address)",
      [
        ethereum.Value.fromFixedBytes(_hashedMessage),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_v)),
        ethereum.Value.fromFixedBytes(_r),
        ethereum.Value.fromFixedBytes(_s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isAdmin(OrgId: BigInt, account: Address): boolean {
    let result = super.call("isAdmin", "isAdmin(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(OrgId),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isAdmin(OrgId: BigInt, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAdmin", "isAdmin(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(OrgId),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  sigNonces(param0: Address): BigInt {
    let result = super.call("sigNonces", "sigNonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_sigNonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sigNonces", "sigNonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalOrg(): BigInt {
    let result = super.call("totalOrg", "totalOrg():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalOrg(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalOrg", "totalOrg():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(id: BigInt): BigInt {
    let result = super.call("totalSupply", "totalSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(OrgId: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(OrgId)
    ]);

    return result[0].toString();
  }

  try_uri(OrgId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(OrgId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class AddAdminCall extends ethereum.Call {
  get inputs(): AddAdminCall__Inputs {
    return new AddAdminCall__Inputs(this);
  }

  get outputs(): AddAdminCall__Outputs {
    return new AddAdminCall__Outputs(this);
  }
}

export class AddAdminCall__Inputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }

  get OrgId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newAccount(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddAdminCall__Outputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }
}

export class AddAdminWithSigCall extends ethereum.Call {
  get inputs(): AddAdminWithSigCall__Inputs {
    return new AddAdminWithSigCall__Inputs(this);
  }

  get outputs(): AddAdminWithSigCall__Outputs {
    return new AddAdminWithSigCall__Outputs(this);
  }
}

export class AddAdminWithSigCall__Inputs {
  _call: AddAdminWithSigCall;

  constructor(call: AddAdminWithSigCall) {
    this._call = call;
  }

  get OrgId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get caller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get newAccount(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get sig(): AddAdminWithSigCallSigStruct {
    return changetype<AddAdminWithSigCallSigStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class AddAdminWithSigCall__Outputs {
  _call: AddAdminWithSigCall;

  constructor(call: AddAdminWithSigCall) {
    this._call = call;
  }
}

export class AddAdminWithSigCallSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BurnBatchCall extends ethereum.Call {
  get inputs(): BurnBatchCall__Inputs {
    return new BurnBatchCall__Inputs(this);
  }

  get outputs(): BurnBatchCall__Outputs {
    return new BurnBatchCall__Outputs(this);
  }
}

export class BurnBatchCall__Inputs {
  _call: BurnBatchCall;

  constructor(call: BurnBatchCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class BurnBatchCall__Outputs {
  _call: BurnBatchCall;

  constructor(call: BurnBatchCall) {
    this._call = call;
  }
}

export class CreateOrganisationWithSigCall extends ethereum.Call {
  get inputs(): CreateOrganisationWithSigCall__Inputs {
    return new CreateOrganisationWithSigCall__Inputs(this);
  }

  get outputs(): CreateOrganisationWithSigCall__Outputs {
    return new CreateOrganisationWithSigCall__Outputs(this);
  }
}

export class CreateOrganisationWithSigCall__Inputs {
  _call: CreateOrganisationWithSigCall;

  constructor(call: CreateOrganisationWithSigCall) {
    this._call = call;
  }

  get _firstAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get description(): string {
    return this._call.inputValues[2].value.toString();
  }

  get newuri(): string {
    return this._call.inputValues[3].value.toString();
  }

  get sig(): CreateOrganisationWithSigCallSigStruct {
    return changetype<CreateOrganisationWithSigCallSigStruct>(
      this._call.inputValues[4].value.toTuple()
    );
  }
}

export class CreateOrganisationWithSigCall__Outputs {
  _call: CreateOrganisationWithSigCall;

  constructor(call: CreateOrganisationWithSigCall) {
    this._call = call;
  }
}

export class CreateOrganisationWithSigCallSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class IsVerifyCall extends ethereum.Call {
  get inputs(): IsVerifyCall__Inputs {
    return new IsVerifyCall__Inputs(this);
  }

  get outputs(): IsVerifyCall__Outputs {
    return new IsVerifyCall__Outputs(this);
  }
}

export class IsVerifyCall__Inputs {
  _call: IsVerifyCall;

  constructor(call: IsVerifyCall) {
    this._call = call;
  }

  get signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _hashedMessage(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sig(): IsVerifyCallSigStruct {
    return changetype<IsVerifyCallSigStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class IsVerifyCall__Outputs {
  _call: IsVerifyCall;

  constructor(call: IsVerifyCall) {
    this._call = call;
  }
}

export class IsVerifyCallSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class RemoveAdminCall extends ethereum.Call {
  get inputs(): RemoveAdminCall__Inputs {
    return new RemoveAdminCall__Inputs(this);
  }

  get outputs(): RemoveAdminCall__Outputs {
    return new RemoveAdminCall__Outputs(this);
  }
}

export class RemoveAdminCall__Inputs {
  _call: RemoveAdminCall;

  constructor(call: RemoveAdminCall) {
    this._call = call;
  }

  get OrgId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get removeAccount(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveAdminCall__Outputs {
  _call: RemoveAdminCall;

  constructor(call: RemoveAdminCall) {
    this._call = call;
  }
}

export class RemoveAdminWithSigCall extends ethereum.Call {
  get inputs(): RemoveAdminWithSigCall__Inputs {
    return new RemoveAdminWithSigCall__Inputs(this);
  }

  get outputs(): RemoveAdminWithSigCall__Outputs {
    return new RemoveAdminWithSigCall__Outputs(this);
  }
}

export class RemoveAdminWithSigCall__Inputs {
  _call: RemoveAdminWithSigCall;

  constructor(call: RemoveAdminWithSigCall) {
    this._call = call;
  }

  get OrgId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get caller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get removeAccount(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get sig(): RemoveAdminWithSigCallSigStruct {
    return changetype<RemoveAdminWithSigCallSigStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class RemoveAdminWithSigCall__Outputs {
  _call: RemoveAdminWithSigCall;

  constructor(call: RemoveAdminWithSigCall) {
    this._call = call;
  }
}

export class RemoveAdminWithSigCallSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateOrgProfileCall extends ethereum.Call {
  get inputs(): UpdateOrgProfileCall__Inputs {
    return new UpdateOrgProfileCall__Inputs(this);
  }

  get outputs(): UpdateOrgProfileCall__Outputs {
    return new UpdateOrgProfileCall__Outputs(this);
  }
}

export class UpdateOrgProfileCall__Inputs {
  _call: UpdateOrgProfileCall;

  constructor(call: UpdateOrgProfileCall) {
    this._call = call;
  }

  get OrgId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get description(): string {
    return this._call.inputValues[2].value.toString();
  }

  get newuri(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class UpdateOrgProfileCall__Outputs {
  _call: UpdateOrgProfileCall;

  constructor(call: UpdateOrgProfileCall) {
    this._call = call;
  }
}

export class UpdateOrgProfileWithSigCall extends ethereum.Call {
  get inputs(): UpdateOrgProfileWithSigCall__Inputs {
    return new UpdateOrgProfileWithSigCall__Inputs(this);
  }

  get outputs(): UpdateOrgProfileWithSigCall__Outputs {
    return new UpdateOrgProfileWithSigCall__Outputs(this);
  }
}

export class UpdateOrgProfileWithSigCall__Inputs {
  _call: UpdateOrgProfileWithSigCall;

  constructor(call: UpdateOrgProfileWithSigCall) {
    this._call = call;
  }

  get caller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get OrgId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get description(): string {
    return this._call.inputValues[3].value.toString();
  }

  get newuri(): string {
    return this._call.inputValues[4].value.toString();
  }

  get sig(): UpdateOrgProfileWithSigCallSigStruct {
    return changetype<UpdateOrgProfileWithSigCallSigStruct>(
      this._call.inputValues[5].value.toTuple()
    );
  }
}

export class UpdateOrgProfileWithSigCall__Outputs {
  _call: UpdateOrgProfileWithSigCall;

  constructor(call: UpdateOrgProfileWithSigCall) {
    this._call = call;
  }
}

export class UpdateOrgProfileWithSigCallSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
